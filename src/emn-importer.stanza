defpackage emn-importer :
  import core
  import jitx
  import jitx/layer-specs
  import idf-parser

defstruct Layer :
  layer : LayerIndex|LayerSpecifier
  shape : Shape

defmethod write (o:OutputStream, lyr:Layer) :
  print(o, "layer(")
  write(o, layer(lyr))
  print(o, ")")
  print(o, " = ")
  write(o, shape(lyr))
  println(o, "")

public defn import-emn (emn-filename:String, package-name:String, output-stanza-filename:String) :
  defn to-body (xs:Seqable) :
    Indented $ within indented() :
      val ss = StringBuffer()
      do(write{ss _} xs)
      to-string(ss)

  defn sanitize (s:String) -> String :
    if letter?(s[0]) or s[0] == '_' : s
    else :
      string-join(["_" s])

  ; Go!
  val idf = IdfParser(emn-filename)
  val board-cutouts = for a in board-cutouts(idf) seq :
    Layer(Cutout(), a)
  val holes = for a in holes(idf) seq :
    Layer(Cutout(), Circle(Point(x(a) y(a)), dia(a) * 0.5))
  val route-keepouts = for c in route-keepouts(idf) seq :
    Layer(ForbidCopper(LayerIndex(0),LayerIndex(0,Bottom)), outline(c))
  val via-keepouts = for v in via-keepouts(idf) seq :
    Layer(ForbidVia(), outline(v))
  val notes = for note in notes(idf) seq :
    val s = replace{_, to-string(to-char(2)), ""} $ replace(str(note), to-string(to-char(1)), "")
    Layer(CustomLayer("Notes", Top), Text(s, height(note), NW, loc(Point(x(note) y(note)))))
  val placement = for part in placement(idf) seq :
    val side = Bottom when side(part) == "BOTTOM" else Top
    Layer(CustomLayer("Placement", side), Text(refdes(part), 1.0, SW, loc(Point(x(part) y(part)))))
  val layers-body = to-body $ cat-all([
    board-cutouts, holes, route-keepouts, via-keepouts, notes, placement
  ])

  val ss = StringBuffer()
  ; header
  println(ss, \<B>
#use-added-syntax(jitx)
defpackage %_/board :
  import core
  import collections
  import jitx
  import jitx/commands
<B> % [sanitize(package-name)])

  ; pcb-board
  println(ss, "public val emn-board-outline =")
  println(ss, Indented $ within indented() :
    to-string(board-outline(idf)))
  println(ss, "")
  ; Other layers
  println(ss, "public defn emn-module () :")
  println(ss, Indented $ within indented() :
    string-join(["inside pcb-module :", layers-body], "\n")
  )
  spit(output-stanza-filename, to-string(ss))

