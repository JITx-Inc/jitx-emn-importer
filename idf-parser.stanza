#use-added-syntax(jitx)
defpackage jitx/idf-parser :
  import core
  import collections
  import math
  import jitx
  import lang-utils
  import jitx/geometry/shapes/arc-utils
  import jitx/geometry/measure/distance

; ==================================================================
; Put this in importer to prevent loss of knowledge
; Depending on mode of operation, idf-parser could be in user space.
; ==================================================================

; IR for an IDF file.
defstruct IdfHeader :
  filetype: String
  IDFversion: Double
  Source_system: String
  date: String
  version: Int
  name: String
  units: String
with :
  printer

public defstruct IdfOutline :
  owner: String
  ident:  String ; if this is a board/panel/route/place_outline, that identifier goes here
                 ; if this is a keepout, that identifier goes here
  thickness: Double ; the height field for place outlines goes here, set to 0.0 for anything with no depth
  layers: String ; use for side for place outlines/keepouts.  Set to null string for via keepouts or board outline
  outline: PolygonWithArcs|Circle
  cutouts: List<PolygonWithArcs|Circle>
with :
  printer

public defstruct IdfHole :
  dia: Double
  x: Double
  y: Double
  plating: String
  assoc: String
  type: String
  owner: String
with :
  printer

public defstruct IdfNote :
  x: Double
  y: Double
  height: Double
  length: Double
  str: String
with :
  printer

public defstruct IdfPart :
  package: String
  partnumber: String
  refdes: String
  x: Double
  y: Double
  offset: Double
  angle: Double
  side: String
  status: String
with :
  printer

public defstruct IdfPlacement :
  ident: String
  parts: List<IdfPart>
with :
  printer

public defstruct IdfFile :
  header : IdfHeader
  board-outline : PolygonWithArcs|Circle
  board-cutouts : Tuple<PolygonWithArcs|Circle>
  other-outlines : Tuple<IdfOutline>
  route-outlines : Tuple<IdfOutline>
  route-keepouts : Tuple<IdfOutline>
  via-keepouts : Tuple<IdfOutline>
  place-keepouts : Tuple<IdfOutline>
  holes : Tuple<IdfHole>
  notes : Tuple<IdfNote>
  placement : Tuple<IdfPart>
with :
  printer

public defstruct IdfException <: Exception :
  name : String

public defmethod print (o:OutputStream, e:IdfException) :
  print(o, name(e))

; this is the most important one.  This is for a single line in the body
; of a section of an EMN that describes an area.  We collect these, and then
; turn them into JITX objects.
defstruct loopt <: Equalable :
  id: Int
  loopn: Int
  x: Double
  y: Double
  angle: Double
with :
  printer

; If you found a keyword that's a head of a section, you can use this to find the matching tail
defn findsectionend (a:List<String>, matchstr:String) -> Int : ; returns position of the match string
  match(index-when({_ == matchstr}, a)) :
    (i:Int) : i
    (_) : throw(IdfException(to-string $ "%_ not found." % [matchstr]))

; loopts, holes, and notes are sections that have lists of indefinite length, this turns
; piles of strings into lists of structs
val loopt-id-seq = to-seq(0 to false)
defn loopt_parser (a:List<String>) -> List<loopt> :
  val t = loopt(next(loopt-id-seq) to-int(get(a,0)) as Int to-double(get(a,1)) as Double to-double(get(a,2)) as Double to-double(get(a,3)) as Double)
  if (length(a) == 4) : List(t)
  else : cons(t loopt_parser(tailn(a,4)))

defn idf_hole_parser (a:List<String> ucnv:Double) -> List<IdfHole> :
  val t = IdfHole((to-double(get(a,0)) as Double) * ucnv, (to-double(get(a,1)) as Double) * ucnv, (to-double(get(a,2)) as Double) * ucnv, get(a,3), get(a,4) get(a,5) get(a,6))
  if (length(a) == 7) : List(t)
  else : cons(t idf_hole_parser(tailn(a,7) ucnv))

defn idf_note_parser (a:List<String> ucnv:Double) -> List<IdfNote> :
  val t  = IdfNote((to-double(get(a,0)) as Double) * ucnv, (to-double(get(a,1)) as Double) * ucnv, (to-double(get(a,2)) as Double) * ucnv, (to-double(get(a,3)) as Double) * ucnv, get(a,4) )
  if (length(a) == 5) : List(t)
  else : cons(t idf_note_parser(tailn(a,5) ucnv))

defn idf_placement_parser (a:List<String> ucnv:Double) -> List<IdfPart> :
  val t  = IdfPart(get(a,0), get(a,1), get(a,2), (to-double(get(a,3)) as Double) * ucnv, (to-double(get(a,4)) as Double) * ucnv, (to-double(get(a,5)) as Double) * ucnv, (to-double(get(a,6)) as Double), get(a,7), get(a,8) )
  if (length(a) == 9) : List(t)
  else : cons(t idf_placement_parser(tailn(a,9) ucnv))

defn loopt_PolygonWithArcs ( inpts:List<loopt> ucnv:Double ) -> List<PolygonWithArcs|Circle> :
  val grouped = group-by(loopn, inpts)
  to-list $ for kv in to-seq(grouped) seq :
    val vs = to-list $ lazy-qsort(id, value(kv))
    var current-point:Point = Point(x(head(vs)), y(head(vs)))
    val elems = to-tuple $ generate<Circle|Point|Arc> :
      for v in vs do :
        if (angle(v) == 0.0) : ; this is a point!
          ;println("pt %_" % [Point(x(get(inpts (b))) y(get(inpts (b))))])
          val p = Point(x(v) * ucnv, y(v) * ucnv)
          current-point = p
          yield(p)
        else if (angle(v) == 360.0 or angle(v) == -360.0) : ; this is a circle, we can't deal
          val p = Point(x(v) * ucnv, y(v) * ucnv)
          val dist = distance(current-point, p)
          val circle = Circle(current-point, dist)
          current-point = p
          yield $ circle
        else : ; this is an arc
          val xp = x(current-point)
          val yp = y(current-point)
          val xn = x(v) * ucnv
          val yn = y(v) * ucnv
          val a = angle(v)
          val dist = sqrt((xp - xn) * (xp - xn) + (yp - yn) * (yp - yn))
          val xm = (xp + xn) / 2.0
          val ym = (yp + yn) / 2.0
          val risex = (xn - xp) / dist
          val risey = (yn - yp) / dist
          val halfswang = to-radians(a / 2.0)
          val distover2 = dist / 2.0
          val radius = abs(distover2 / sin(halfswang))
          val over180 = -1.0 when (abs(a) > 180.0) else 1.0
          val negative = sign(a)
          val distmtoc = sqrt(radius * radius - distover2 * distover2)
          val xc = xm - risey * distmtoc * over180 * negative
          val yc = ym + risex * distmtoc * over180 * negative
          val stang = to-degrees(atan2(yp - yc, xp - xc))
          ; println("dist=%_ m=(%_,%_) risex=%_ risey=%_ halfswang=%_ distover2=%_ radius=%_ over180=%_ negative=%_ distmtoc=%_ c=(%_,%_) stang=%_" % [dist xm ym risex risey halfswang distover2 radius over180 negative distmtoc xc yc stang])
          val stang* = (stang + 360.0) when (stang < 0.0) else
                       (stang - 360.0) when (stang > 360.0) else stang
          ;stang = arcrounder(stang, 1.0e-4)
          current-point = Point(xn, yn)
          yield $ Arc(xc yc radius stang* a)
    ; sanitize elements
    defn fuzzy-equal? (aps:List<Point>, pt:Point) -> True|False :
      any?({distance(_, pt) < 0.001} aps)
    defn sanitize-points (elems:Seqable<Circle|Point|Arc>, aps:List<Point>) :
      to-list $ unique $ for elem in elems seq? :
        match(elem) :
          (c:Circle|Arc) : One(c)
          (p:Point) :
            if fuzzy-equal?(aps, p) :
              None()
            else :
              One $ p
    defn arc-points (elems:Seqable<Circle|Point|Arc>) :
      to-list $ cat-all $ for elem in elems seq? :
        match(elem:Arc) :
          One $ [start-point(elem) end-point(elem)]
        else : None()
    val elems* = sanitize-points(elems arc-points(elems))
    defn reverse-list (xs:List<Circle|Point|Arc>) -> List<Circle|Point|Arc> :
      to-list $ for x in reverse(xs) seq :
        match(x) :
          (c:Circle|Point) : c
          (arc:Arc) : Arc(end-point(arc), mid-point(arc), start-point(arc))
    val elems** = reverse-list(elems*) when key(kv) != 0 else elems*
    match(head(elems**)) :
      (c:Circle) : c
      (_) : PolygonWithArcs(elems**)

; this takes a filename, and returns a list of idf_<foo> structures
public defn IdfParser (filename:String) -> IdfFile :
  val lines = split{_ "\n"} $ replace{_, "\r\n", "\n"} $ slurp(filename)
  var b:List<String> = to-list $ for line in lines seq-cat :
    tokenize-shell-command(line)

  var ucnv:Double = 1.0

  val headers = Vector<IdfHeader>()
  val board-outlines = Vector<IdfOutline>()
  val other-outlines = Vector<IdfOutline>()
  val route-outlines = Vector<IdfOutline>()
  val route-keepouts = Vector<IdfOutline>()
  val via-keepouts = Vector<IdfOutline>()
  val place-keepouts = Vector<IdfOutline>()
  val holes = Vector<IdfHole>()
  val notes = Vector<IdfNote>()
  val placement = Vector<IdfPart>()

  while (not empty?(b)) :
    val qt = head(b)
    switch {_} :
      qt == ".HEADER" :
        val endp = findsectionend(tailn(b,1),".END_HEADER")
        val h = headn(tailn(b,1),endp)
        val header = IdfHeader( get(h,0),
                                to-double(get(h,1)) as Double,
                                get(h,2),
                                get(h,3),
                                to-int(get(h,4)) as Int,
                                get(h,5),
                                get(h,6))
        add(headers, header)
        if (units(header) == "THOU") :
          ucnv = 0.0254
        else if (units(header) == "MM") :
          ucnv = 1.0
        else :
          println("error in IDF header; what are the units? %_" % [units(header)])
          ucnv = 1.0
        b = tailn(b,endp + 2)
      contains?([".BOARD_OUTLINE" ".PANEL_OUTLINE"], qt) :
        val endp = findsectionend(tailn(b,1),".END_BOARD_OUTLINE")
        val h = headn(tailn(b,1),endp)
        val j = tailn(h,2)
        val outlines = loopt_PolygonWithArcs(loopt_parser(j) ucnv )
        ; the first one is outline, the others are cutouts
        val outline = head(outlines)
        val cutouts = tail(outlines)
        val board-outline = IdfOutline(get(h,0), qt, to-double(get(h,1)) as Double, "", outline, cutouts)
        add(board-outlines, board-outline)
        b = tailn(b,endp + 2)
      qt == ".OTHER_OUTLINE" :
        val endp = findsectionend(tailn(b,1),".END_OTHER_OUTLINE")
        val h = headn(tailn(b,1),endp)
        val j = tailn(h,4)
        val outlines = loopt_PolygonWithArcs(loopt_parser(j) ucnv)
        val outline = head(outlines)
        val cutouts = tail(outlines)
        val other-outline = IdfOutline(get(h,0), get(h,1), to-double(get(h,2)) as Double, get(h,3), outline, cutouts)
        add(other-outlines, other-outline)
        b = tailn(b,endp + 2)
      qt == ".ROUTE_OUTLINE" :
        val endp = findsectionend(tailn(b,1),".END_ROUTE_OUTLINE")
        val h = headn(tailn(b,1),endp)
        val j = tailn(h,2)
        val outline = head(loopt_PolygonWithArcs(loopt_parser(j) ucnv ))
        val route-outline = IdfOutline(get(h,0), qt, 0.0 , get(h,1), outline, List())
        add(route-outlines, route-outline)
        b = tailn(b,endp + 2)
      qt == ".PLACE_OUTLINE" :
        val endp = findsectionend(tailn(b,1),".END_PLACE_OUTLINE")
        val h = headn(tailn(b,1),endp)
        val j = tailn(h,3)
        val outline = head(loopt_PolygonWithArcs(loopt_parser(j) ucnv))
        val place-outline = IdfOutline(get(h,0), qt, to-double(get(h,2)) as Double , get(h,1), outline, List())
        add(route-outlines, place-outline)
        b = tailn(b,endp + 2)
      qt == ".ROUTE_KEEPOUT" :
        val endp = findsectionend(tailn(b,1),".END_ROUTE_KEEPOUT")
        val h = headn(tailn(b,1),endp)
        val j = tailn(h,2)
        val outline = head(loopt_PolygonWithArcs(loopt_parser(j) ucnv))
        val route-keepout = IdfOutline(get(h,0), ".ROUTE_KEEPOUT", 0.0 , get(h,1), outline, List())
        add(route-keepouts, route-keepout)
        b = tailn(b,endp + 2)
      qt == ".VIA_KEEPOUT" :
        val endp = findsectionend(tailn(b,1),".END_VIA_KEEPOUT")
        val h = headn(tailn(b,1),endp)
        val j = tailn(h,1)
        val outline = head(loopt_PolygonWithArcs(loopt_parser(j) ucnv))
        val via-keepout = IdfOutline(get(h,0), ".VIA_KEEPOUT", 0.0 , "", outline, List())
        add(via-keepouts, via-keepout)
        b = tailn(b,endp + 2)
      qt == ".PLACE_KEEPOUT" :
        val endp = findsectionend(tailn(b,1),".END_PLACE_KEEPOUT")
        val h = headn(tailn(b,1),endp)
        val j = tailn(h,3)
        val outline = head(loopt_PolygonWithArcs(loopt_parser(j) ucnv))
        val place-keepout = IdfOutline(get(h,0), ".PLACE_KEEPOUT", to-double(get(h,2)) as Double , get(h,1), outline, List())
        add(place-keepouts, place-keepout)
        b = tailn(b,endp + 2)
      qt == ".DRILLED_HOLES" :
        val endp = findsectionend(tailn(b,1),".END_DRILLED_HOLES")
        val h = headn(tailn(b,1),endp)
        val hs = idf_hole_parser(h ucnv)
        add-all(holes, hs)
        b = tailn(b,endp + 2)
      qt == ".NOTES" :
        val endp = findsectionend(tailn(b,1),".END_NOTES")
        val h = headn(tailn(b,1),endp)
        val ns = idf_note_parser(h ucnv)
        add-all(notes, ns)
        b = tailn(b,endp + 2)
      qt == ".PLACEMENT" :
        val endp = findsectionend(tailn(b,1),".END_PLACEMENT")
        val h = headn(tailn(b,1),endp)
        val ps = idf_placement_parser(h ucnv)
        add-all(placement, ps)
        b = tailn(b,endp + 2)
      else :
        println("you are at the else statement, this is a problem")
        println(b)
        b = List()
  ; done parsing
  if length(headers) < 1 :
    throw(IdfException("No IDF Header"))
  if length(headers) > 1 :
    throw(IdfException("Too many IDF Headers"))
  if length(board-outlines) != 1:
    throw(IdfException("Board Outline is not singleton"))
  IdfFile(
    headers[0]
    outline(board-outlines[0])
    to-tuple $ cutouts(board-outlines[0])
    to-tuple $ other-outlines
    to-tuple $ route-outlines
    to-tuple $ route-keepouts
    to-tuple $ via-keepouts
    to-tuple $ place-keepouts
    to-tuple $ holes
    to-tuple $ notes
    to-tuple $ placement
  )

public defn generate-layers (idf:IdfFile) :
  inside pcb-module :
    for a in board-cutouts(idf) do :
      layer(Cutout()) = a
    for a in holes(idf) do :
      layer(Cutout()) = Circle(Point(x(a) y(a)), dia(a) * 0.5)
    for c in route-keepouts(idf) do :
      layer(ForbidCopper(LayerIndex(0),LayerIndex(0,Bottom))) = outline(c)
    for c in via-keepouts(idf) do :
      layer(ForbidVia()) = outline(c)
    for note in notes(idf) do :
      val s = replace{_, to-string(to-char(2)), ""} $ replace(str(note), to-string(to-char(1)), "")
      layer(CustomLayer("Notes", Top)) = Text(s, height(note), NW, loc(Point(x(note) y(note))))
    for part in placement(idf) do :
      val side = Bottom when side(part) == "BOTTOM" else Top
      layer(CustomLayer("Placement", side)) = Text(refdes(part), 1.0, SW, loc(Point(x(part) y(part))))

; this could easily be written to return false if it doesn't find it
public defn findarefdes (a:IdfFile, refdesIwant:String) -> IdfPart|False :
  find({refdes(_) == refdesIwant} placement(a))
